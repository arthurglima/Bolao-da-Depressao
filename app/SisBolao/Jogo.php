<?php

namespace App\SisBolao;

use App\Models\BolaoHasUser;
use App\Models\Jogo as JogoModel;
use App\SisBolao\Observer\AbstractObserver;
use App\User;

class Jogo extends JogoModel
{

  /**
   * Campeonato constructor.
   * @param array $attributes
   */
  public function __construct(array $attributes = [])
  {
    parent::__construct($attributes);
    $this->fillFields($attributes);
  }

  /**
   * Adiciona observadores no jogo
   * @param AbstractObserver $observer_in
   */
  public function attach(AbstractObserver $observer_in)
  {
    $this->observers[] = $observer_in;
  }

  /**
   * Retira observadores do jogo
   * @param AbstractObserver $observer_in
   */
  public function detach(AbstractObserver $observer_in)
  {
    foreach ($this->observers as $key => $val) {
      if ($val == $observer_in) {
        unset($this->observers[$key]);
      }
    }
  }

  /**
   * Notifica todos os observadores
   */
  public function notify()
  {
    /** @var AbstractObserver $obs */
    foreach ($this->observers as $obs) {
      $obs->updateSub($this);
    }
  }

  /**
   * Função que define todos os atributos da classe
   * @param array $attributes -
   * @return Jogo
   */
  public function fill(array $attributes)
  {
    $this->fillFields($attributes);
    parent::fill($attributes);
    return $this;
  }

  /**
   * Preenche dinamicamente o atributos da classe;
   * @param array $attributes
   */
  private function fillFields(array $attributes = [])
  {
    foreach ($attributes as $key => $value) {
      if (in_array($key, $this->fillable)) {
        $this->{$key} = $value;
      }
    }
  }

  /**
   * Retorna o time mandante do jogo
   * @return \Illuminate\Database\Eloquent\Relations\HasOne
   */
  public function mandante()
  {
    return $this->hasOne(Time::class, 'id', 'time_id_mandante');
  }

  /**
   * Retorna o time visitante do jogo
   * @return \Illuminate\Database\Eloquent\Relations\HasOne
   */
  public function visitante()
  {
    return $this->hasOne(Time::class, 'id', 'time_id_visitante');
  }

  public function usuarioComPalpiteNoJogo()
  {
    return $this->hasMany(Palpite::class, 'jogo_id', 'id')
      ->select('u.id', 'u.name', 'u.email')
      ->join('users as u', 'u.id', '=', 'palpite.bolao_has_user_users_id');
  }

  /**
   * Retorna um jogo pela chave
   * @param $id - identificador do jogo
   * @return Jogo
   */
  public function getById($id)
  {
    return $this->where('id', '=', $id)->first();
  }

  /**
   * Cria um novo jogo
   * @param array $options
   * @return bool
   */
  public function save(array $options = [])
  {
    $this->jogo_status_id = 4;
    $this->notify();
    return parent::save($options); // TODO: Change the autogenerated stub
  }

  /**
   * Registra os observadores do jogo
   */
  public function registraTodosObservadores()
  {
    foreach ($this->usuarioComPalpiteNoJogo as $comPalpiteNoJogo) {
      $usuarioObservador = (new User())->getById($comPalpiteNoJogo->id);
      $this->attach($usuarioObservador);
    }
  }

  /**
   * Registra os observadores do jogo
   */
  public function removeTodosObservadores()
  {
    foreach ($this->usuarioComPalpiteNoJogo as $comPalpiteNoJogo) {
      $usuarioObservador = (new User())->getById($comPalpiteNoJogo->id);
      $this->detach($usuarioObservador);
    }
  }

  /**
   * Atualiza jogo
   * @param array $attributes
   * @param array $options
   * @return bool
   */
  public function update(array $attributes = [], array $options = [])
  {
    return parent::update($attributes, $options); // TODO: Change the autogenerated stub
  }

}