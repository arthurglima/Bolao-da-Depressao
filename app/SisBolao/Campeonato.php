<?php

namespace App\SisBolao;

use App\Models\Campeonato as CampeonatoModel;
use Mockery\Exception;

class Campeonato extends CampeonatoModel
{
  /**
   * Campeonato constructor.
   * @param array $attributes
   */
  public function __construct(array $attributes = [])
  {
    parent::__construct($attributes);
    $this->fillFields($attributes);
  }

  /**
   * Retorna o Identificador do campeonato
   * @return mixed
   */
  public function getId()
  {
    return $this->id;
  }

  /**
   * Define o identificador do campeonato
   * @param mixed $id
   */
  public function setId($id)
  {
    $this->id = $id;
  }

  /**
   * Retorna o nome do campeonato
   * @return mixed
   */
  public function getNome()
  {
    return $this->nome;
  }

  /**
   * Define o nome do campeonato
   * @param mixed $nome
   */
  public function setNome($nome)
  {
    $this->nome = $nome;
  }


  /**
   * Função que define todos os atributos da classe
   * @param array $attributes -
   * @return Campeonato
   */
  public function fill(array $attributes)
  {
    $this->fillFields($attributes);
    parent::fill($attributes);
    return $this;
  }


  /**
   * @param array $attributes
   */
  private function fillFields(array $attributes = [])
  {
    foreach ($attributes as $key => $value) {
      if (in_array($key, $this->fillable)) {
        $this->{$key} = $value;
      }
    }
  }

  /**
   * Retorna o campeonato pelo ID;
   * @param int $id - Identificador do Time
   * @return Campeonato
   */
  public function getById(int $id)
  {
    $campeonato = $this->where('id', '=', $id)->first();
    $this->fillFields($campeonato->toArray());
    return $campeonato;
  }

  /**
   * Criação do Campeonato, ao cria o campeonato todas as fase devem ser criadas
   * @param array $options
   * @return bool
   */
  public function save(array $options = [])
  {
    if ($this->fase_qtd !== null && $this->fase_qtd > 0) {
      for ($i = 0; $i < $this->fase_qtd; $i++) {
        Fase::create(['name' => 'Rodada ' . ($i + 1), 'campeonato_id' => $this->id, 'ordem' => $i + 1]);
      }
    } else {
      throw new Exception("Quantidade de Rodadas deve ser maior que 0");
    }

    return parent::save($options);
  }

  /**
   * Remove um campeonato
   * @return bool|null
   * @throws \Exception
   */
  public function delete()
  {
    return parent::delete(); // TODO: Change the autogenerated stub
  }

}